buffer{}
material{}

rendrange plural rendranges {
	int from
	int to
	material m
	
	draw(buffer&){
		printf("draw_render_range\n")
	}
} 

glo/glos {
	buffer&;
	rendranges rendrngs;
	
	draw{
		printf ("draw_glo\n")
		
		for r in rendranges {
			r.draw(buffer)
		}
		
		for all const r in rendranges {
			r.draw buffer
			
			for j c in rendranges{
				if c==1 return false
				r.draw (buffer)
				j.draw (buffer)
				true
			}
			
		}
	}
}

vec3/vecs3 {
	x=0.0
	y=0.0
	z=0.0
}

vec4/vecs4 {
	vec3;
	t=0.0
}


position/positions {vec3}
lookvec/lookvecs {vec3}

rendctx {}

glob/globs {
	glo&;
	globs;
	position;
	lookvec;
	
	draw (rendctx&)	glo.draw(rendctx)
}
array of glob globs
array of glob refs globs_added
array of glob refs globs_removed

glob ref root



global{
	glob g1
	
	draw {
		printf("draw_global\n")
	}

	main_loop{
		
	}

	main{
		draw()
		gl.draw()
		
		glo g
		g.draw()
		g.rendrngs.draw()
	}
}

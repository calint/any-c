vec3 {x=0.0 y=0.0 z=0.0}

vec4 {vec3; t=0.0}

vec4 : vec3 {t=0.0}

position {vec3}

orientation {vec3}

scale {vec3}

lookvec {vec3}

rendctx {}

buffer template typename T {}

dictionary aka kvps is template for typename T {}

dictionary aka kvps template T {}


kvps template T {}

kvps template T {}

material{}



rendrange plural rendranges
{
	int from
	
	int to
	
	material m
	
	draw (buffer&) {
		printf("draw_render_range\n")
	}
} 



glo / glos {
	
	buffer&;
	
	rendranges rendrngs;
	
	draw (rendctx&)	{
		printf ("draw_glo\n")
		
		for all const r in rendranges {
			r.draw(buffer)
		}
		
		for i c in rendranges {
			i.draw (buffer)
			printf (" counter:%d",c)
			
			for j cc in rendranges {
				if cc==1 return false
				r.draw (buffer)
				j.draw (buffer)
				true
			}
			
		}
	}
}



glob {
	
	glo : glo ref
	
	position : vec3
	
	orientation : vec3
	
	lookvec : vec3
	
	globs : buffer of globs
	
	leftglobs : buffer of globs
	
	options { add allocated remove free }
	
	draw (rendctx&)	glo.draw(rendctx)

}



global{

	glos;
	
	globs;
	
	root : glob

	g1 : glob
	
	draw {
		printf("draw_global\n")
	}

	main{
		draw()
		gl.draw()
		
		glo g
		g.draw()
		g.rendrngs.draw()
	}

}

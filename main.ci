buffer{}

material{}

vec3 {x=0.0 y=0.0 z=0.0}

vec4 {vec3; t=0.0}

position {vec3}

orientation {vec3}

lookvec {vec3}

rendctx {}



rendrange plural rendranges {
	int from
	int to
	material m
	
	draw (buffer&) {
		printf("draw_render_range\n")
	}
} 

glo/glos {
	buffer&;
	rendranges rendrngs;
	
	draw (rendctx&)	{
		printf ("draw_glo\n")
		
		for r in rendranges {
			r.draw(buffer)
		}
		
		for all const i c in rendranges {
			i.draw buffer
			printf(" counter:%d",c)
			
			for j c in rendranges {
				if c==1 return false
				r.draw (buffer)
				j.draw (buffer)
				true
			}
			
		}
	}
}

glob/globs {
	
	glo&;
	
	position;
	
	orientation;
	
	lookvec;
	
	globs;
	
	globs leftglobs
	
	options { add allocated remove free }
	
	draw (rendctx&)	glo.draw(rendctx)
}

globs;

glob root



global{
	glob g1
	
	draw {
		printf("draw_global\n")
	}

	main_loop{
		
	}

	main{
		draw()
		gl.draw()
		
		glo g
		g.draw()
		g.rendrngs.draw()
	}
}

#pragma once
#include"typedefs.h"
//----------------------------------------------------------------------config

#define ${name}_initial_capacity 8
#define ${name}_bounds_check 1

//------------------------------------------------------------------------ def

typedef struct ${name}{
	${type} *data;
	unsigned count;
	unsigned cap;
}${name};
${name} ${name}_def={0,0,0};

//--------------------------------------------------------------------- private

inline static void _${name}_insure_free_capcity(${name}*this,arrayix n){
	const unsigned rem=this->cap-this->count;
	if(rem>=n)
		return;
	if(this->data){
		unsigned new_cap=this->cap*2;
		${type} *new_data=realloc(this->data,sizeof(${type})*new_cap);
		if(!new_data){
			fprintf(stderr,"\nout-of-memory");
			fprintf(stderr,"\tfile: '%s'  line: %d\n\n",__FILE__,__LINE__);
			exit(-1);
		}
		if(new_data!=this->data){
			this->data=new_data;
		}
		this->cap=new_cap;
		return;
	}
	this->cap=${name}_initial_capacity;
	this->data=malloc(sizeof(${type})*this->cap);
	if(!this->data){
		fprintf(stderr,"\nout-of-memory");
		fprintf(stderr,"\tfile: '%s'  line: %d\n\n",__FILE__,__LINE__);
		exit(-1);
	}
}

//---------------------------------------------------------------------- public

inline static void ${name}_add(${name}*this,${type} o){
	_${name}_insure_free_capcity(this,1);
	*(this->data+this->count++)=o;
}

//-----------------------------------------------------------------------------

inline static ${type} ${name}_get(${name}*this,arrayix index){
#ifdef ${name}_bounds_check
	if(index>=this->cap){
		fprintf(stderr,"\nindex-out-of-bounds");
		fprintf(stderr,"\t%s\n\n%d  index: %u    capacity: %u\n",
				__FILE__,__LINE__,index,this->cap);
		exit(-1);
	}
#endif
	${type} p=*(this->data+index);
	return p;
}

//-----------------------------------------------------------------------------

inline static ${type} ${name}_get_last(${name}*this){
	${type} p=*(this->data+this->count-1);
	return p;
}

//-----------------------------------------------------------------------------

inline static size_t ${name}_size_in_bytes(${name}*this){
	return this->count*sizeof(${type});
}

//-----------------------------------------------------------------------------

inline static void ${name}_free(${name}*this){
	if(!this->data)
		return;
	free(this->data);
}

//-----------------------------------------------------------------------------

inline static void ${name}_add_list(${name}*this,/*copies*/const ${type}*str,int n){
	//? optimize
	const ${type}*p=str;
	while(n--){
		_${name}_insure_free_capcity(this,1);
		*(this->data+this->count++)=*p++;
	}
}

//-----------------------------------------------------------------------------

inline static void ${name}_add_string(${name}*this,/*copies*/const ${type}*str){
	//? optimize
	const ${type}*p=str;
	while(*p){
		_${name}_insure_free_capcity(this,1);
		*(this->data+this->count++)=*p++;
	}
}

//-----------------------------------------------------------------------------

inline static void ${name}_write_to_fd(${name}*this,int fd){
	if(!this->data)
		return;
	write(fd,this->data,this->count);
}

//-----------------------------------------------------------------------------

